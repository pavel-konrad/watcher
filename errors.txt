Chci vylepsit tento kod a pridat nasledujici funkcionality:
Po kliknuti na div social, mi rozsireni zobrazi v divu detailed-data kategorizovane vysledky, ktere rozradi na zaklade klicovych slov, ktery ziska z url nebo title. Zaroven toto zobrazeni vyjadri procentualne, kde vypise cislo a pote nastavi velikost divu pro kazdy div zvlast(div id social, div id education) kde sirka divu bude odpovidat procentualnimu vyjadreni. Tedy utvori progressbar
//background.js
class PageVisitsTracker {
  constructor() {
    this.init();
  }

  init() {
    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
      if (request.type === 'savePageVisitData') {
        this.handleSavePageVisitData(request, sendResponse);
        return true;
      } else if (request.type === 'getCategorizedPageVisits') {
        this.handleGetCategorizedPageVisits(sendResponse);
        return true;
      }
    });
  }

  handleSavePageVisitData(request, sendResponse) {
    const url = request.url;
    const timeSpent = request.timeSpent;
    const pageTitle = request.pageTitle;

    this.getUserIpAddress()
      .then(userIpAddress => {
        this.savePageVisitData(userIpAddress, url, timeSpent, pageTitle);
        sendResponse({ message: 'Data byla uložena.' });
      })
      .catch(error => {
        console.error('Chyba při získávání IP adresy:', error);
      });
  }

  handleGetCategorizedPageVisits(sendResponse) {
    this.getCategorizedPageVisits()
      .then(({ categorizedData, categoryPercentages }) => {
        sendResponse({ categorizedData, categoryPercentages });
      })
      .catch(error => {
        console.error('Chyba při získávání kategorizovaných dat:', error);
      });
  }

  getUserIpAddress() {
    return fetch('https://api.ipify.org?format=json')
      .then(response => response.json())
      .then(data => data.ip);
  }

  savePageVisitData(ipAddress, url, timeSpent, pageTitle) {
    chrome.storage.local.get({ pageVisits: [] }, data => {
      const pageVisits = data.pageVisits;

      pageVisits.push({
        ipAddress: ipAddress,
        url: url,
        timeSpent: timeSpent,
        pageTitle: pageTitle,
      });

      chrome.storage.local.set({ pageVisits: pageVisits }, () => {
        console.log('Data o návštěvě stránky uložena:', pageVisits);
      });
    });
  }

  async getCategorizedPageVisits() {
    return new Promise((resolve, reject) => {
      chrome.storage.local.get(['pageVisits'], data => {
        const pageVisits = data.pageVisits || [];

        const categorizedData = {
          social: [],
          education: [],
          work: [],
          research: [],
          other: [],
        };

        pageVisits.forEach(visit => {
          const category = this.categorizePageVisit(visit);
          categorizedData[category].push(visit);
        });

        const categoryPercentages = this.calculateCategoryPercentages(categorizedData);

        resolve({ categorizedData, categoryPercentages });
      });
    });
  }

  categorizePageVisit(visit) {
    const url = visit.url;
    const keywordToCategoryMap = {
      social: ['facebook.com', 'twitter.com', 'instagram.com'],
      education: ['coursera.org', 'udemy.com', 'khanacademy.org'],
      // Další klíčová slova a kategorie...
    };
  
    for (const category in keywordToCategoryMap) {
      const keywords = keywordToCategoryMap[category];
      for (const keyword of keywords) {
        if (url.includes(keyword)) {
          return category;
        }
      }
    }
    return 'other';
  }

  calculateCategoryPercentages(categorizedData) {
    const totalVisits = Object.values(categorizedData).reduce((total, categoryData) => total + categoryData.length, 0);
  
    const categoryPercentages = {};
    for (const category in categorizedData) {
      const categoryData = categorizedData[category];
      const categoryPercentage = (categoryData.length / totalVisits) * 100;
      categoryPercentages[category] = categoryPercentage;
    }
  
    return categoryPercentages;
  }
}

new PageVisitsTracker();


//content.js
class PageVisitTracker {
  constructor() {
    this.startTracking();
  }

  startTracking() {
    this.currentUrl = window.location.href;
    this.pageTitle = document.title;
    this.startTime = new Date().getTime();

    const unloadListener = () => {
      const endTime = new Date().getTime();
      const timeSpent = endTime - this.startTime;
      this.savePageVisitData(timeSpent);
      window.removeEventListener('beforeunload', unloadListener);
    };

    window.addEventListener('beforeunload', unloadListener);
  }

  savePageVisitData(timeSpent) {
    chrome.runtime.sendMessage(
      {
        type: 'savePageVisitData',
        url: this.currentUrl,
        timeSpent: timeSpent,
        pageTitle: this.pageTitle,
      },
      response => {
        console.log(response.message);
      }
    );
  }
}

new PageVisitTracker();

//poupup.js
class PopupUI {
  constructor() {
    this.progressBarSocial = document.querySelector('#div-social');
    this.progressBarEducation = document.querySelector('#div-education');
    this.progressBarOther = document.querySelector('#div-other');

    this.progressBarSocial.addEventListener('click', () => this.scrollToSection('#detailed-data'));
    this.progressBarEducation.addEventListener('click', () => this.scrollToSection('#detailed-data'));
    this.progressBarOther.addEventListener('click', () => this.scrollToSection('#detailed-data'));

    this.clearDataButton = document.querySelector('#clear-data-button');
    this.donateButton = document.querySelector('#donate-button');

    this.clearDataButton.addEventListener('click', () => this.clearData());
    this.donateButton.addEventListener('click', () => this.openDonateLink());

    this.fetchCategorizedPageVisits();
  }

  scrollToSection(sectionId) {
    const sectionElement = document.querySelector(sectionId);
    if (sectionElement) {
      const sectionTop = sectionElement.offsetTop;
      window.scrollTo({ top: sectionTop, behavior: 'smooth' });
    }
  }

  fetchCategorizedPageVisits() {
    chrome.runtime.sendMessage({ type: 'getCategorizedPageVisits' }, (response) => {
      const categorizedData = response.categorizedData;
      const categoryPercentages = response.categoryPercentages;
      this.updateUI(categorizedData, categoryPercentages);
    });
  }

  updateUI(categorizedData, categoryPercentages) {
    // Zde doplňte kód pro zobrazení dat v popupu
    this.displayCategorizedData(categorizedData.social);
  }

  displayCategorizedData(categoryData) {
    const detailedDataContainer = document.querySelector('#detailed-data');
    detailedDataContainer.innerHTML = ''; // Vyčistit obsah kontejneru
  
    categoryData.forEach(visit => {
      const detailedItem = document.createElement('div');
      detailedItem.classList.add('detailed-item');
  
      const visitUrl = document.createElement('a');
      visitUrl.href = visit.url;
      visitUrl.textContent = visit.pageTitle || visit.url;
      visitUrl.target = '_blank';
  
      const visitTimeSpent = document.createElement('span');
      visitTimeSpent.textContent = `Time spent: ${visit.timeSpent} ms`;
  
      detailedItem.appendChild(visitUrl);
      detailedItem.appendChild(visitTimeSpent);
  
      detailedDataContainer.appendChild(detailedItem);
    });
  }


  clearData() {
    chrome.runtime.sendMessage({ type: 'clearAllData' }, (response) => {
      if (response.message === 'Data cleared.') {
        window.location.reload(); // Refresh popup after clearing data
      }
    });
  }

  openDonateLink() {
    chrome.tabs.create({ url: 'https://www.paypal.com/donate/?hosted_button_id=3SXLYVB58ADJ2' });
  }
}

document.addEventListener('DOMContentLoaded', () => {
  new PopupUI();
});

// popup.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Watcher</title>
  <style>
  /* Styly pro popup.html */
body {
  font-family: Arial, sans-serif;
  background-color: #f5f5f5;
  margin: 0;
  padding: 0;
}

.grid-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 320px;
  padding: 1rem;
}

.hero {
  display: grid;
  grid-gap: 20px;
  align-items: center;
}
.data{
  width: 100%;
}
/* Styly pro progress bar */
.progress-bar {
  width: 100%;
  height: 2.9rem;
  margin-top: 0.7rem;
  margin-bottom: 0.7rem;
  background-color: #FBFBFD;
  border-radius: 5px;
  box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.3);
}

#div-social, #div-education, #div-work, #div-research, #div-other {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  color: #272829;
  font-weight: 500;
  height: 2.5rem;
  padding: 0.2rem 0.2rem 0.2rem 1rem;
  font-size: 0.7rem;
  border-radius: 5px;
  background-color: #D8D9DA;
  transition: background-color 0.3s, filter 0.3s;
}

#div-social:hover, #div-education:hover, #div-work:hover, #div-research:hover, #div-other:hover {
  cursor: pointer;
  background-color: #D8D9DA;
  filter: brightness(1.1);
}

/* Styly pro tlačítko Clear Data */
#clear-data-button {
  display: inline-block;
  padding: 10px 20px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

#clear-data-button:hover {
  background-color: #45a049;
}

#clear-data-button:active {
  background-color: #3d8b3d;
}

/* Styly pro tlačítko Donate */
.donate {
  display: flex;
  justify-content: center;
  padding: 10px 20px;
  background-color: #007bff;
  color: white;
  text-decoration: none;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

/* Styly pro footer */
.footer {
  opacity: 0;
  animation: fadeIn 1s ease-in-out forwards;
  animation-delay: 2s;
}

@keyframes fadeIn {
  to {
    opacity: 1;
  }
}

/* Styly pro autorovy ikony */
.author {
  display: flex;
  flex-direction: row;
}

  </style>
</head>
<body>
  <div class="grid-container">
    <a href="#" class="hero-text">
      <div class="hero">
        <h1 class="hero-text">Watcher</h1>
        <div class="logo"></div>
      </div>
    </a>
    <h2>Your personal procrastination killer</h2>
    <button id="clear-data-button">Clear Data</button>
    <div class="data">
      <div class="progress-bar">
        <div id="div-social"></div>
      </div>
      <div class="progress-bar">
        <div id="div-education"></div>
      </div>
      <div class="progress-bar">
        <div id="div-work"></div>
      </div>
      <div class="progress-bar">
        <div id="div-research"></div>
      </div>
      <div class="progress-bar">
        <div id="div-other"></div>
      </div>
      <div class="transparent"></div>
    </div>
    <div id="detailed-data">
      <!-- Your detailed data content here -->
    </div>
    <div class="footer">
      <p>Watcher is free! I don't collect your data. It's designed for quick stats about your internet usage time. If you enjoy using Watcher, please consider donating. Your honesty would be greatly appreciated.</p>
      <button id="donate-button" class="donate">Donate</button>
    </div>
    <div class="author">
      <p>Created by Pavel Konrad</p>
      <img src="../images/instagram.png" alt="instagram">
      <img src="../images/github.png" alt="github">
      <img src="../images/linkedin.png" alt="linkedin">
    </div>
  </div>
  <script src="./popup.js"></script>
</body>
</html>
